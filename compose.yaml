services:
  app:
    build:
      context: .
    container_name: app
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      
    volumes:
      - ./alembic/versions:/app/alembic/versions  # Link Alembic migrations
      - .:/app
    

  db:
    image: postgres
    container_name: db
    restart: always
    user: postgres
    volumes:
      - pg-data:/var/lib/postgresql/data
    env_file:
      - .env
    # expose:
    #   - 5432
    ports:
      - 5434:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    user: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    

  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    

  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A app.core.worker.celery_app worker --loglevel=info
    hostname: celery_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app

  celery-beat:
    build:
      context: .
    command: celery -A app.core.worker.celery_app beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - db
    user: appuser
    volumes:
      - celery-beat-data:/var/run/celery  # Persist the schedule file

volumes:
  pg-data:
  celery-beat-data:



